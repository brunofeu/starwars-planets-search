{"version":3,"sources":["images/star-wars-4.svg","audio/audio.mp3","context/PlanetContext.js","components/Header.jsx","components/Table.jsx","services/getPlanets.js","context/PlanetProvider.js","App.js","index.js"],"names":["module","exports","PlanetContext","createContext","Header","useContext","data","isLoading","setNameFilterText","filters","getNumericFilters","removeFilter","getSortOrder","name","filterByName","useState","value","numericFilters","setNumericFilters","columnOptions","setColumsOptions","column","sort","sortOrderList","setSortOrderList","useEffect","comparison","handleChange","target","handleCheck","className","autoPlay","src","type","audio","logo","alt","placeholder","data-testid","onChange","ev","map","option","key","selected","onClick","filter","disabled","length","Object","keys","element","htmlFor","id","checked","filterByNumericValues","index","newFilters","concat","handleClick","Table","filteredPlanets","replace","toUpperCase","planetInfo","values","slice","info","indexInfo","url","href","includes","verifyIfURLField","URL_PLANETS","a","fetch","result","json","resultJson","results","forEach","planet","residents","getPlanets","PlanetProvider","children","setData","setIsLoading","setFilteredPlanets","order","setFilters","dataPlanets","fetchPlanetsList","filtered","toLowerCase","filteredByNumbers","item","parseInt","sorted","Number","isNaN","b","switchForText","switchForNumber","contextValue","newFilter","Provider","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.84abef05.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/star-wars-4.c41f740a.svg\";","module.exports = __webpack_public_path__ + \"static/media/audio.11a73037.mp3\";","import { createContext } from 'react';\n\nconst PlanetContext = createContext();\n\nexport default PlanetContext;\n","/* eslint-disable jsx-a11y/media-has-caption */\n/* eslint-disable react/jsx-max-depth */\nimport React, { useContext, useEffect, useState } from 'react';\nimport PlanetContext from '../context/PlanetContext';\n\nimport logo from '../images/star-wars-4.svg';\nimport audio from '../audio/audio.mp3';\n\nfunction Header() {\n  const {\n    data,\n    isLoading,\n    setNameFilterText,\n    filters,\n    getNumericFilters,\n    removeFilter,\n    getSortOrder } = useContext(PlanetContext);\n\n  const { filterByName: { name } } = filters;\n  const [numericFilters, setNumericFilters] = useState({ value: 0 });\n\n  const options = (\n    ['population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water']);\n\n  const [columnOptions, setColumsOptions] = useState(options);\n  const [sortOrderList, setSortOrderList] = useState({ column: 'name', sort: 'ASC' });\n\n  useEffect(() => {\n    setNumericFilters({ column: columnOptions[0], comparison: 'maior que', value: 0 });\n  }, [columnOptions]);\n\n  const handleChange = ({ target }) => {\n    setNumericFilters({ ...numericFilters, [target.name]: target.value });\n  };\n\n  const handleSubmit = () => {\n    getNumericFilters(numericFilters);\n    setColumsOptions(columnOptions.filter((option) => option !== numericFilters.column));\n  };\n\n  const handleSubmitOrder = () => {\n    getSortOrder(sortOrderList);\n  };\n\n  const handleClick = (ev) => {\n    const { filterByNumericValues } = filters;\n    const newFilters = filterByNumericValues\n      .filter(({ column }) => column !== ev);\n    setColumsOptions(columnOptions.concat(ev));\n    removeFilter(newFilters);\n  };\n\n  const handleCheck = ({ target: { value } }) => {\n    setSortOrderList({ ...sortOrderList, sort: value });\n  };\n\n  const handleChangeColumnSort = ({ target }) => {\n    setSortOrderList({ ...sortOrderList, column: target.value });\n  };\n\n  const filterColumnList = () => columnOptions.map((option) => (\n    <option key={ option } value={ option }>{option}</option>));\n\n  const activeFilter = () => (\n    <ul>\n      { filters.filterByNumericValues.map(({ column, comparison, value }, index) => (\n        <li key={ index } data-testid=\"filter\">\n          {`${column} ${comparison} ${value}`}\n          <button\n            className=\"del-btn\"\n            type=\"button\"\n            onClick={ () => handleClick(column) }\n          >\n            Apagar\n          </button>\n        </li>\n      )) }\n    </ul>\n  );\n\n  return (\n    <main className=\"App-header\">\n      <audio autoPlay>\n        <source src=\"horse.ogg\" type=\"audio/ogg\" />\n        <source src={ audio } type=\"audio/mpeg\" />\n        Your browser does not support the audio element.\n      </audio>\n      <img className=\"App-logo\" src={ logo } alt=\"logo-starwars\" />\n      <div className=\"filter-container\">\n        <div className=\"filter-form\">\n          <input\n            className=\"filter-by-name\"\n            type=\"text\"\n            placeholder=\"Filtrar por Nome\"\n            data-testid=\"name-filter\"\n            value={ name }\n            onChange={ (ev) => setNameFilterText(ev.target) }\n          />\n          <div className=\"filter-details\">\n            <div className=\"filter-by-number\">\n              <select data-testid=\"column-filter\" name=\"column\" onChange={ handleChange }>\n                {filterColumnList()}\n              </select>\n              <select\n                data-testid=\"comparison-filter\"\n                name=\"comparison\"\n                onChange={ handleChange }\n              >\n                <option selected value=\"maior que\">maior que</option>\n                <option value=\"menor que\">menor que</option>\n                <option value=\"igual a\">igual a</option>\n              </select>\n              <input\n                name=\"value\"\n                value={ numericFilters.value }\n                type=\"number\"\n                data-testid=\"value-filter\"\n                onChange={ handleChange }\n              />\n              <button\n                type=\"button\"\n                onClick={ handleSubmit }\n                data-testid=\"button-filter\"\n                disabled={ columnOptions.length === 0 }\n              >\n                Adicionar Filtro\n              </button>\n            </div>\n            <div className=\"filter-sort\">\n              <select\n                data-testid=\"column-sort\"\n                name=\"sort\"\n                onChange={ handleChangeColumnSort }\n              >\n                {!isLoading && Object.keys(data[0]).map((element) => (\n                  <option key={ element } name=\"column\" value={ element }>\n                    {element}\n                  </option>))}\n              </select>\n              <label htmlFor=\"ASC\" className=\"column-sort-radio\">\n                <input\n                  type=\"radio\"\n                  value=\"ASC\"\n                  name=\"order\"\n                  id=\"ASC\"\n                  onChange={ handleCheck }\n                  checked={ sortOrderList.sort === 'ASC' }\n                  data-testid=\"column-sort-input-asc\"\n                />\n                ASC\n              </label>\n              <label htmlFor=\"DESC\" className=\"column-sort-radio\">\n                <input\n                  type=\"radio\"\n                  value=\"DESC\"\n                  name=\"order\"\n                  id=\"DESC\"\n                  onChange={ handleCheck }\n                  data-testid=\"column-sort-input-desc\"\n                  checked={ sortOrderList.sort === 'DESC' }\n                />\n                DESC\n              </label>\n              <button\n                type=\"button\"\n                data-testid=\"column-sort-button\"\n                onClick={ handleSubmitOrder }\n              >\n                Ordenar\n              </button>\n            </div>\n          </div>\n        </div>\n        {activeFilter()}\n      </div>\n    </main>\n  );\n}\n\nexport default Header;\n","import PropTypes from 'prop-types';\nimport React, { useContext } from 'react';\nimport PlanetContext from '../context/PlanetContext';\n\nfunction Table() {\n  const { data, isLoading, filteredPlanets } = useContext(PlanetContext);\n\n  const PLANET_INFO_LENGTH = 13;\n\n  const verifyIfURLField = (info) => (\n    info.includes('https')\n      ? (\n        <a href={ info } className=\"list-url\">\n          { info }\n        </a>)\n      : info\n  );\n\n  return (\n    <div className=\"table-container\">\n      {filteredPlanets.length === 0\n        ? <h3>Nenhum planeta atende ao filtro selecionado</h3>\n        : !isLoading && (\n          <table className=\"table\">\n            <thead>\n              <tr>\n                {Object.keys(data[0]).map((element) => (\n                  <th key={ element }>\n                    {element.replace('_', ' ').toUpperCase()}\n                  </th>))}\n              </tr>\n            </thead>\n            <tbody>\n              {filteredPlanets.map((planetInfo, index) => (\n                <tr key={ index }>\n                  <td key={ planetInfo.name } data-testid=\"planet-name\">\n                    {planetInfo.name}\n                  </td>\n                  {Object.values(planetInfo)\n                    .slice(1, PLANET_INFO_LENGTH).map((info, indexInfo) => (\n                      <td key={ indexInfo }>\n                        {typeof (info) === 'object'\n                          ? info.map((url) => (\n                            <a key={ url } href={ url } className=\"list-url\">\n                              { url }\n                              <br />\n                            </a>))\n                          : verifyIfURLField(info) }\n                      </td>\n                    ))}\n                </tr>))}\n            </tbody>\n          </table>)}\n    </div>\n  );\n}\n\nTable.propTypes = {\n  data: PropTypes.shape({\n    map: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nexport default Table;\n","const URL_PLANETS = 'https://swapi-trybe.herokuapp.com/api/planets/';\n\nasync function getPlanets() {\n  const result = await fetch(URL_PLANETS);\n  const resultJson = await result.json();\n  const { results } = resultJson;\n  results.forEach((planet) => delete planet.residents);\n  return results;\n}\n\nexport default getPlanets;\n","import PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport getPlanets from '../services/getPlanets';\nimport PlanetContext from './PlanetContext';\n\nfunction PlanetProvider({ children }) {\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [filteredPlanets, setFilteredPlanets] = useState([]);\n  const [filters, setFilters] = useState({\n    filterByName: { name: '' },\n    filterByNumericValues: [],\n    order: { column: 'name', sort: 'ASC' },\n  });\n\n  async function fetchPlanetsList() {\n    setIsLoading(true);\n    const dataPlanets = await getPlanets();\n    setFilteredPlanets(dataPlanets);\n    setData(dataPlanets);\n    setIsLoading(false);\n  }\n\n  useEffect(() => {\n    fetchPlanetsList();\n  }, []);\n\n  const setNameFilterText = ({ value }) => {\n    setFilters({ ...filters, filterByName: { name: value } });\n  };\n\n  const getNumericFilters = (value) => {\n    setFilters(\n      { ...filters, filterByNumericValues: [...filters.filterByNumericValues, value] },\n    );\n  };\n\n  const getSortOrder = (order) => {\n    setFilters({ ...filters, order });\n  };\n\n  const removeFilter = (newFilter) => {\n    setFilters({ ...filters, filterByNumericValues: newFilter });\n  };\n\n  useEffect(() => {\n    const filtered = data\n      .filter(({ name }) => (\n        name.toLowerCase().includes(filters.filterByName.name.toLowerCase())));\n    setFilteredPlanets(filtered);\n  }, [filters.filterByName, data]);\n\n  useEffect(() => {\n    let filteredByNumbers = '';\n    const { filterByNumericValues } = filters;\n    if (filterByNumericValues.length === 0) {\n      setFilteredPlanets(data);\n    } else {\n      filteredByNumbers = data;\n      filterByNumericValues.forEach(({ column, comparison, value }) => {\n        switch (comparison) {\n        case 'maior que': filteredByNumbers = filteredByNumbers.filter(\n          (item) => (parseInt(item[column], 10) > parseInt(value, 10)),\n        );\n          break;\n        case 'menor que': filteredByNumbers = filteredByNumbers.filter(\n          (item) => (parseInt(item[column], 10) < parseInt(value, 10)),\n        );\n          break;\n        case 'igual a': filteredByNumbers = filteredByNumbers.filter(\n          (item) => (parseInt(item[column], 10) === parseInt(value, 10)),\n        );\n          break;\n        default:\n          break;\n        }\n      });\n      setFilteredPlanets(filteredByNumbers);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [filters.filterByNumericValues]);\n\n  const switchForText = () => {\n    const { sort, column } = filters.order;\n    const NEGATIVE_INDEX = -1;\n    let sorted = '';\n    switch (sort) {\n    case 'ASC':\n      sorted = filteredPlanets.sort((a, b) => {\n        if (a[column] > b[column]) return 1;\n        if (b[column] > a[column]) return NEGATIVE_INDEX;\n        return 0;\n      });\n      break;\n    case 'DESC':\n      sorted = filteredPlanets.sort((a, b) => {\n        if (a[column] > b[column]) return NEGATIVE_INDEX;\n        if (b[column] > a[column]) return 1;\n        return 0;\n      });\n      break;\n    default:\n      break;\n    }\n    return sorted;\n  };\n\n  const switchForNumber = () => {\n    const { sort, column } = filters.order;\n    const NEGATIVE_INDEX = -1;\n    let sorted = '';\n    switch (sort) {\n    case 'ASC':\n      sorted = filteredPlanets.sort((a, b) => {\n        if (parseInt(a[column], 10) > parseInt(b[column], 10)) return 1;\n        if (parseInt(b[column], 10) > parseInt(a[column], 10)) return NEGATIVE_INDEX;\n        return 0;\n      });\n      break;\n    case 'DESC':\n      sorted = filteredPlanets.sort((a, b) => {\n        if (parseInt(a[column], 10) > parseInt(b[column], 10)) return NEGATIVE_INDEX;\n        if (parseInt(b[column], 10) > parseInt(a[column], 10)) return 1;\n        return 0;\n      });\n      break;\n    default:\n      break;\n    }\n    return sorted;\n  };\n\n  useEffect(() => {\n    const { order } = filters;\n    const { column } = order;\n    let sorted = '';\n    if (isLoading) setFilteredPlanets(filteredPlanets);\n    if (!isLoading && filteredPlanets.length !== 0) {\n      sorted = (!Number.isNaN(parseInt(filteredPlanets[0][column], 10))\n        ? switchForNumber()\n        : switchForText());\n      setFilteredPlanets(sorted);\n    }\n    setFilters({ ...filters });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [filters.order, filteredPlanets]);\n\n  const contextValue = {\n    data,\n    isLoading,\n    filteredPlanets,\n    setNameFilterText,\n    getNumericFilters,\n    filters,\n    removeFilter,\n    getSortOrder,\n  };\n\n  return (\n    <PlanetContext.Provider value={ contextValue }>\n      {children}\n    </PlanetContext.Provider>\n  );\n}\n\nPlanetProvider.propTypes = {\n  children: PropTypes.string.isRequired,\n};\n\nexport default PlanetProvider;\n","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Table from './components/Table';\nimport PlanetProvider from './context/PlanetProvider';\n\nfunction App() {\n  return (\n    <PlanetProvider>\n      <Header />\n      <Table />\n    </PlanetProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}